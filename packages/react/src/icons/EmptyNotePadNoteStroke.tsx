import * as React from "react";
import { IconContext, type IconContextValue } from "../core/context";

const paths = {
  fill: "",
  regular: "<path fill=\"none\" stroke=\"currentColor\" stroke-width=\"16\" stroke-linecap=\"round\" stroke-linejoin=\"round\" fill-rule=\"evenodd\" d=\"M12.512-.003c2.312 0 4.23.114 5.797.452 1.578.34 2.866.921 3.848 1.903S23.72 4.622 24.06 6.2c.338 1.566.452 3.485.452 5.797a53 53 0 0 1-.035 1.994h.02l-.063.868a24 24 0 0 1-.178 1.806l-.017.117a17 17 0 0 1-.197 1.078q-.026.12-.053.235a13 13 0 0 1-.128.482l-.056.181q-.04.131-.082.258-.028.08-.057.16-.049.137-.101.27-.032.076-.066.152-.052.127-.109.25-.027.058-.056.114-.064.136-.133.265-.04.072-.08.14-.054.098-.11.192c-.612.987-1.422 1.696-2.427 2.206l-.058.031a8 8 0 0 1-.321.15l-.069.03q-.162.069-.33.132l-.093.035a9 9 0 0 1-.782.246l-.095.026q-.187.05-.381.093l-.075.018q-.823.183-1.757.286c-.679.075-1.41.122-2.199.15l-.896.038v-.013q-.495.009-1.016.01c-2.311 0-4.23-.115-5.797-.453-1.578-.34-2.866-.921-3.847-1.903-.982-.981-1.563-2.27-1.904-3.847-.338-1.567-.452-3.486-.452-5.797 0-2.312.114-4.23.452-5.797.34-1.578.922-2.866 1.904-3.848S5.138.79 6.715.45c1.567-.338 3.486-.452 5.797-.452m0 2c-2.272 0-4.02.115-5.375.407-1.344.29-2.233.74-2.855 1.362-.623.623-1.073 1.512-1.363 2.856-.292 1.355-.407 3.103-.407 5.375s.115 4.02.407 5.375c.29 1.343.74 2.233 1.363 2.855.622.623 1.511 1.072 2.855 1.362 1.355.293 3.103.408 5.375.408q.612 0 1.176-.013c.275-2.579.934-4.537 2.425-5.863 1.476-1.314 3.591-1.844 6.357-2.034q.042-.959.042-2.09c0-2.272-.115-4.02-.407-5.375-.29-1.344-.74-2.233-1.362-2.856s-1.512-1.072-2.856-1.362c-1.355-.292-3.103-.407-5.375-.407m9.8 14.107c-2.46.197-3.935.68-4.87 1.512-.9.801-1.46 2.074-1.73 4.27 2.292-.183 3.727-.613 4.67-1.343a4 4 0 0 0 .2-.166c.9-.802 1.46-2.075 1.73-4.273\" clip-rule=\"evenodd\"/>",
  light: "",
} as const;

export default function EmptyNotePadNoteStroke(props: React.SVGProps<SVGSVGElement> & Partial<IconContextValue>) {
  const ctx = React.useContext(IconContext);
  const { size = ctx.size, color = ctx.color, weight = ctx.weight, mirrored = ctx.mirrored, ...rest } = props;
  const g = paths[weight] ?? paths.regular ?? paths.fill ?? paths.light ?? "";
  const transform = mirrored ? "scale(-1,1) translate(-256,0)" : undefined;

  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 256 256"
      xmlns="http://www.w3.org/2000/svg"
      color={color}
      {...rest}
    >
      <g transform={transform} dangerouslySetInnerHTML={{ __html: g }} />
    </svg>
  );
}