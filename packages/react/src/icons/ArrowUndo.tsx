import * as React from "react";
import { IconContext, type IconContextValue } from "../core/context";

const paths = {
  fill: "<path fill=\"currentColor\" stroke=\"none\" d=\"M90.344 44.29c4.994-3.121 11.574-1.606 14.698 3.385 3.121 4.994 1.606 11.574-3.386 14.698a92 92 0 0 0-31.812 33.625h84.844c32.407 0 58.644 26.274 58.645 58.666 0 32.401-26.266 58.666-58.666 58.667h-16c-5.891 0-10.667-4.776-10.667-10.667.002-5.888 4.777-10.666 10.667-10.666h16c20.618-.001 37.333-16.715 37.333-37.334-.002-20.625-16.702-37.333-37.312-37.333H69.844a92 92 0 0 0 31.812 33.625c4.993 3.123 6.506 9.704 3.386 14.698-3.123 4.993-9.704 6.507-14.698 3.385a113.3 113.3 0 0 1-45.146-54l-1.77-4.416a10.67 10.67 0 0 1 0-7.917l1.77-4.416a113.3 113.3 0 0 1 45.146-54\"/>",
  regular: "<path fill=\"currentColor\" stroke=\"none\" d=\"M90.344 44.29c4.994-3.121 11.574-1.606 14.698 3.385 3.121 4.994 1.606 11.574-3.386 14.698a92 92 0 0 0-31.812 33.625h84.844c32.407 0 58.644 26.274 58.645 58.666 0 32.401-26.266 58.666-58.666 58.667h-16c-5.891 0-10.667-4.776-10.667-10.667.002-5.888 4.777-10.666 10.667-10.666h16c20.618-.001 37.333-16.715 37.333-37.334-.002-20.625-16.702-37.333-37.312-37.333H69.844a92 92 0 0 0 31.812 33.625c4.993 3.123 6.506 9.704 3.386 14.698-3.123 4.993-9.704 6.507-14.698 3.385a113.3 113.3 0 0 1-45.146-54l-1.77-4.416a10.67 10.67 0 0 1 0-7.917l1.77-4.416a113.3 113.3 0 0 1 45.146-54\"/>",
  light: "<path fill=\"currentColor\" stroke=\"none\" d=\"M89.094 43.884a7.998 7.998 0 0 1 8.48 13.562 94.67 94.67 0 0 0-34.792 38.552h89.239c30.934 0 55.978 25.078 55.98 56 0 30.928-25.073 55.999-56 56h-16a8 8 0 0 1 0-16h16c22.091-.001 40-17.909 40-40-.002-22.096-17.894-40-39.98-40h-89.25a94.66 94.66 0 0 0 34.803 38.552 7.998 7.998 0 0 1-8.48 13.563 110.65 110.65 0 0 1-44.093-52.729l-1.76-4.417a8 8 0 0 1 0-5.937L45 96.613a110.65 110.65 0 0 1 44.093-52.73\"/>",
} as const;

export default function ArrowUndo(props: React.SVGProps<SVGSVGElement> & Partial<IconContextValue>) {
  const ctx = React.useContext(IconContext);
  const { size = ctx.size, color = ctx.color, weight = ctx.weight, mirrored = ctx.mirrored, ...rest } = props;
  const g = paths[weight] ?? paths.regular ?? paths.fill ?? paths.light ?? "";
  const transform = mirrored ? "scale(-1,1) translate(-256,0)" : undefined;

  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 256 256"
      xmlns="http://www.w3.org/2000/svg"
      color={color}
      {...rest}
    >
      <g transform={transform} dangerouslySetInnerHTML={{ __html: g }} />
    </svg>
  );
}